<?php /* @var \Magento\Framework\View\Element\Template $block */ ?>

<script>
    require([
        'jquery',
        'Magento_Ui/js/modal/confirm',
        'mage/backend/validation',
        'mage/translate'
    ], function ( $, confirm ) {
        //========= variables ==========
        var saveButton                  = $('#save');
        var nextButton                  = $('#Next');
        var resetButton                 = $('#reset');
        var sourceStoreWrapper          = $('#source-store-wrapper');
        var destinationStoreElement     = $('select[name="magento_destination_store"]');
        var destinationLanguageElement  = $('select[name="straker_destination_language"]');
        var sourceStoreElement          = $('select[name="magento_source_store"]');
        var sourceLanguageElement       = $('select[name="straker_source_language"]');
        var contentTabs                 = $('#job_tabs_attachment_products,' +
            '#job_tabs_categories,#job_tabs_cms_pages,#job_tabs_cms_blocks,#job-summary');
        var editForm                    = $('form#edit_form');
        var languagePairSetting         = {};

        //========= functions ==========
        function isEmpty(object) {
            return (
                typeof object === 'undefined' ||
                object === null ||
                ( $.isPlainObject(object) && $.isEmptyObject(object) ) ||
                ( typeof object === 'string' && $.trim(object) === '') ||
                ( object instanceof jQuery && typeof object.get(0) === 'undefined' )
            );
        }

        function stopEvent(e) {
            e.stopImmediatePropagation();
            e.preventDefault();
            return false;
        }

        function removeErrorIconFromTab() {
            var tabs = $('li[role="tab"]');
            if(!isEmpty(tabs) && tabs.length > 0 && !isEmpty(tabs[0])){
                var cssError = '_error';
                var tab = $(tabs[0]);
                if(!isEmpty(tab)){
                    var a = tab.find('a');
                    if(!isEmpty(a)){
                        if(a.hasClass(cssError)){
                            a.removeClass(cssError);
                        }
                    }
                }
            }
        }

        function enableElement(elem) {
            if(!isEmpty(elem)) {
                elem.prop('disabled', false);
            }
        }

        function disableElement(elem) {
            if(!isEmpty(elem)) {
                elem.prop('disabled', true);
            }
        }

        function showElement(elem) {
            if(!isEmpty(elem)) {
                elem.show();
            }
        }

        function hideElement(elem) {
            if(!isEmpty(elem)) {
                elem.hide();
            }
        }

        function isFormValid() {
            var isValid = false;

            if(!isEmpty(editForm)){
                isValid = editForm.valid();
            }

            if ( isValid ) {
                removeErrorIconFromTab();
                enableElement(nextButton);
            } else {
                disableElement(nextButton);
            }

            return isValid;
        }

        function showSourceStore() {
            showElement(sourceStoreWrapper);
        }

        function hideSourceStore() {
            hideElement(sourceStoreWrapper);
        }

        function showSourceStorePicker(destinationStoreId) {
            enableAllOptions();

            if(!isEmpty(destinationStoreId)){
                disableOneOption.apply(sourceStoreElement, [sourceStoreElement, destinationStoreId]);
            }

            destinationLanguageElement.val('');
            sourceStoreElement.val('');
            sourceLanguageElement.val('');

            showSourceStore();
        }

        function hideSourceStorePicker(destinationStoreId, tl, sourceStoreId, sl) {
            hideSourceStore();

            destinationStoreElement.val(destinationStoreId);
            disableOneOption.apply(sourceStoreElement, [sourceStoreElement, destinationStoreId]);

            destinationLanguageElement.val(tl);
            disableOneOption.apply(sourceLanguageElement, [sourceLanguageElement, tl]);

            sourceStoreElement.val(sourceStoreId);
            disableOneOption.apply(destinationStoreElement, [destinationStoreElement, sourceStoreId]);

            sourceLanguageElement.val(sl);
            disableOneOption.apply(destinationLanguageElement, [destinationLanguageElement, sl]);
        }

        function resetLanguagePairElements() {
            destinationStoreElement.val('');
            destinationLanguageElement.val('');
            sourceStoreElement.val('');
            sourceLanguageElement.val('');
            enableAllOptions();
            showSourceStorePicker();
        }

        function disableOneOption(selectElement, optionValue) {
            if (!(selectElement instanceof jQuery)) {
                selectElement = $(selectElement);
            }

            if (!isEmpty(selectElement.get(0)) && !isEmpty(optionValue)) {
                //enable disabled options
                enableOption(selectElement);
                //disable the option with the same value as ```optionValue```
                var option = selectElement.find('option[value="' + optionValue + '"]');
                if(!isEmpty(option)){
                    disableElement(option);
                }
            }
        }

        function enableOption(element) {
            if(!(element instanceof jQuery)){
                element = $(element);
            }

            var option = element.find('option:disabled');
            if(!isEmpty(option)){
                enableElement(option);
            }
        }

        function enableAllOptions() {
            if (!isEmpty(destinationStoreElement)) {
                enableOption(destinationStoreElement);
            }

            if (!isEmpty(destinationLanguageElement)) {
                enableOption(destinationLanguageElement);
            }

            if (!isEmpty(sourceStoreElement)) {
                enableOption(sourceStoreElement);
            }

            if (!isEmpty(sourceLanguageElement)) {
                enableOption(sourceLanguageElement);
            }
        }

        function getLanguageData(name = '') {
            var data =  {
                magento_destination_store: destinationStoreElement,
                magento_source_store: sourceStoreElement,
                straker_destination_language: destinationLanguageElement,
                straker_source_language: sourceLanguageElement
            };

            if( name.trim() === ''){
                return data;
            }else if($.inArray(name, data)){
                return data[name];
            }else{
                return {};
            }
        }

        function compareLanguagePairSettings(setting) {
            var isSame = true;
            $.each(setting, function (k, v) {
                if(setting[k] !== languagePairSetting[k]) {
                    isSame = false;
                    return isSame;
                }
            });
            return isSame;
        }

        function showContentTabs() {
            contentTabs.show();
            $('a#job_tabs_attachment_products').click();
        }

        function showConfirm() {
            var content = $.mage.__('Your current language selection is different than the default language pair ' +
                'you had previously set up. Do you really want to override the previous setting?');
            confirm({
                title: 'Please confirm',
                content: content,
                actions: {
                    confirm: showSourceStore //showContentTabs
                }
            });
        }

        function getObjectKey(key) {
            var objKey = '';
            switch (key) {
                case 'magento_destination_store':
                    objKey = 'straker/general/destination_store';
                    break;
                case 'straker_destination_language':
                    objKey = 'straker/general/destination_language';
                    break;
                case 'magento_source_store':
                    objKey = 'straker/general/source_store';
                    break;
                case 'straker_source_language':
                    objKey = 'straker/general/source_language';
                    break;
            }
            return objKey;
        }

        function checkLanguageData() {
            var languageInputs = getLanguageData();
            var currentLanguagePairSetting = {};
            var emptyCount = 0;

            $.each(languageInputs, function (key, element) {
                var objKey = getObjectKey(key);

                if(!isEmpty(objKey)){
                    currentLanguagePairSetting[objKey] = element.val();
                }

                if (element instanceof jQuery && element.val() === '') {
                    emptyCount++;
                }
            });

            if (emptyCount > 0) {
                disableElement(nextButton);
                disableElement(saveButton);
                return false;
            } else if(!isEmpty(languagePairSetting)){
                var isSame = compareLanguagePairSettings(currentLanguagePairSetting);
                if(!isSame && sourceStoreWrapper.is(':hidden')) {
                    showConfirm();
                }else{
                    return true;
                }
            } else{
                return true;
            }
        }

        function getStoreData(name = '') {
            var data = {
                product_data: $('input[name="products"]'),
                category_data: $('input[name="categories"]'),
                page_data: $('input[name="pages"]'),
                block_data: $('input[name="blocks"]')
            };

            updateSummary(data);

            if( name.trim() === ''){
                return data;
            }else if($.inArray(name, data)){
                return data[name];
            }else{
                return {};
            }
        }

        function checkStoreData() {
            var data = getStoreData();
            var empty = 0;
            $.each(data, function (key, value) {
                if (isEmpty(value.val())) {
                    empty++
                }
            });

            if (empty === 4) {
                disableElement(saveButton);
            } else {
                enableElement(saveButton);
                return true;
            }
            return false;
        }

        function accessLanguageTab(){
            showElement(nextButton);
            hideElement(saveButton);
            hideElement(resetButton);
            hideElement(contentTabs);
        }

        function accessOtherTab() {
            hideElement(nextButton);
            showElement(saveButton);
            showElement(resetButton);
            showElement(contentTabs);
        }

        function updateSummary(data) {
            if(typeof data !== 'undefined'){
                $.each(data, function (item) {
                    var dataItem = data[item];
                    if (typeof dataItem !== 'undefined'
                        && typeof dataItem.val() !== 'undefined'
                        && dataItem.val() !== ''
                    ){
                        var delimiter = item.indexOf('category') === -1 ? '&' : ',';
                        var currentValues = data[item].val().split(delimiter);
                        var newValues = dataItem.val().split(delimiter);
                        var values = currentValues.concat(newValues);
                        values = values.filter( function (v, i) {
                            return values.indexOf(v) === i && v.trim() !== '';
                        });
                        $('#job-summary  td.' + dataItem.attr('name')).html(values.length);
                    }else{
                        $('#job-summary  td.' + dataItem.attr('name')).html(0);
                    }
                });
            }
        }

        (function init() {
            disableElement(saveButton);
            disableElement(nextButton);
            accessLanguageTab();
            showElement(sourceStoreWrapper);
        })();

        function getLanguagePairSetting() {
            var destinationStoreId = '';

            if( !isEmpty(sourceStoreElement) ) {
                sourceStoreElement.val('');
            }

            if( !isEmpty(destinationStoreElement) ) {
                destinationStoreId = destinationStoreElement.val();
            }

            if (destinationStoreId !== '') {
                $.ajax({
                    url: '<?= $block->escapeUrl($block->getUrl('EasyTranslationPlatform/Jobs/CheckLanguagePairs')) ?>',
                    data: {
                        form_key: window.FORM_KEY,
                        target_store_id: destinationStoreId
                    },
                    showLoader: true,
                    type: 'POST'
                }).done(function (response) {
                    if (response['store-data'] !== undefined) {
                        var storeData = response['store-data'];
                        var sourceStoreId = '';
                        var tl = '';
                        var sl = '';

                        if (!isEmpty(storeData['straker/general/destination_language'])) {
                            tl = storeData['straker/general/destination_language'];
                        }

                        if (!isEmpty(storeData['straker/general/source_language'])) {
                            sl = storeData['straker/general/source_language'];
                        }

                        if (!isEmpty(storeData['straker/general/source_store'])) {
                            sourceStoreId = storeData['straker/general/source_store'];
                        }

                        if (sourceStoreId !== '' && tl !== '' && sl !== '') {
                            languagePairSetting = storeData;
                            languagePairSetting['straker/general/destination_store'] = destinationStoreId;
                            //hide source store picker
                            hideSourceStorePicker(destinationStoreId, tl, sourceStoreId, sl);
                        } else {
                            languagePairSetting = {};
                            // show source store picker
                            showSourceStorePicker(destinationStoreId);
                        }
                    }
                    isFormValid();
                });
            } else {
                resetLanguagePairElements();
            }
        }
// console.log();
        //============ Event listeners =============
        // console.log($('ul[role="tablist"]'));
        // if(!isEmpty($('li[role="tab"]'))){
            $('#job_tabs').on('click', 'a', function () {
                if(this.id === 'job_tabs_select_destination'){
                    accessLanguageTab();
                }else{
                    accessOtherTab();
                }
            });
        // }

        if(!isEmpty(nextButton)){
            nextButton.on("click", function (e) {
                e.preventDefault();
                if(!checkLanguageData()){
                    isFormValid();
                    return stopEvent(e);
                }
                showContentTabs();
            });
        }

        if(!isEmpty(editForm)){
            //when language & store changes
            editForm.on("change", "select", function (e) {
                var targetObj = $(e.target);
                if(!isEmpty(targetObj)){
                    var id = targetObj.prop('id');
                    switch(id){
                        case 'magento_destination_store':
                            getLanguagePairSetting();
                            break;
                        case 'straker_destination_language':
                            disableOneOption.apply(this, [sourceLanguageElement, targetObj.val()]);
                            break;
                        case 'magento_source_store':
                            disableOneOption.apply(this, [destinationStoreElement, targetObj.val()]);
                            break;
                        case 'straker_source_language':
                            disableOneOption.apply(this, [destinationLanguageElement, targetObj.val()]);
                            break;
                    }


                }
                isFormValid();
            });

            //when job content (products, categories, cms pages and cms blocks) checked
            editForm.on(
                'click',
                'input, #job_tabs_categories_content a, #job_tabs_categories_content img.x-tree-node-icon',
                function () {
//                checkStoreData();
                $('input[type="hidden"]').trigger('change');

            });
        }

        $('input[type="hidden"]').change(function () {
            // var name = $(this).prop('name');
            // if($.inArray(name, hiddenInputs) !== -1){
                checkStoreData();
            // }
        });

        if (!isEmpty(saveButton)) {
            saveButton.on("click", function (e) {
                if(!checkStoreData()){
                    return stopEvent(e);
                }
                $('body').trigger('processStart');
                disableElement($(this));
            });
        }

        $(document).ajaxSend(function (event, jqXHR, settings) {
            var destination_store_id;
            var source_store_id;

            if(!isEmpty(destinationStoreElement)){
                destination_store_id = destinationStoreElement.val();
            }

            if(!isEmpty(sourceStoreElement)){
                source_store_id = sourceStoreElement.val();
            }

            if (!source_store_id) {
                source_store_id = destination_store_id;
            }

            if (settings.url.toLowerCase().search('easytranslationplatform/jobs/products') > -1) {
                settings.data = settings.data
                    + '&source_store_id=' + source_store_id + '&target_store_id=' + destination_store_id;
//                window.products_ajax_url = settings.url;
            }

            if (settings.url.toLowerCase().search('easytranslationplatform/jobs/pages') > -1) {
                settings.data = settings.data
                    + '&source_store_id=' + source_store_id + '&target_store_id=' + destination_store_id;
            }

            if (settings.url.toLowerCase().search('easytranslationplatform/jobs/blocks') > -1) {
                settings.data = settings.data
                    + '&source_store_id=' + source_store_id + '&target_store_id=' + destination_store_id;
            }
        });
    });
</script>
